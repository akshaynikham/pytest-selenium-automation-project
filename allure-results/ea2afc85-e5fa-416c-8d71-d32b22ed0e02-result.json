{"name": "test_login_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom target frame detached\n  (Session info: chrome=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x00007FF76D631F52+60322]\n\t(No symbol) [0x00007FF76D5ACEC9]\n\t(No symbol) [0x00007FF76D467CE9]\n\t(No symbol) [0x00007FF76D4503B1]\n\t(No symbol) [0x00007FF76D44E39D]\n\t(No symbol) [0x00007FF76D44EBAF]\n\t(No symbol) [0x00007FF76D45E220]\n\t(No symbol) [0x00007FF76D475C6F]\n\t(No symbol) [0x00007FF76D47B67A]\n\t(No symbol) [0x00007FF76D44F33A]\n\t(No symbol) [0x00007FF76D47584F]\n\t(No symbol) [0x00007FF76D4FBFDE]\n\t(No symbol) [0x00007FF76D4DBFC3]\n\t(No symbol) [0x00007FF76D4A9617]\n\t(No symbol) [0x00007FF76D4AA211]\n\tGetHandleVerifier [0x00007FF76D9494AD+3301629]\n\tGetHandleVerifier [0x00007FF76D9936D3+3605283]\n\tGetHandleVerifier [0x00007FF76D989450+3563680]\n\tGetHandleVerifier [0x00007FF76D6E4326+790390]\n\t(No symbol) [0x00007FF76D5B750F]\n\t(No symbol) [0x00007FF76D5B3404]\n\t(No symbol) [0x00007FF76D5B3592]\n\t(No symbol) [0x00007FF76D5A2F9F]\n\tBaseThreadInitThunk [0x00007FFEB6867344+20]\n\tRtlUserThreadStart [0x00007FFEB75BCC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f19da08e75b696d086be28a1b345918\")>\n\n    def test_login_logout(driver):\n>       open_amazon_homepage(driver)\n\ntests\\test_login_logout.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\namazon\\navigation.py:2: in open_amazon_homepage\n    driver.get(\"https://www.amazon.in\")\n..\\..\\..\\PycharmProjects\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\PycharmProjects\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000011056B80B00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...07FF76D5A2F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEB6867344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEB75BCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from target frame detached\nE         (Session info: chrome=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF76D631F52+60322]\nE       \t(No symbol) [0x00007FF76D5ACEC9]\nE       \t(No symbol) [0x00007FF76D467CE9]\nE       \t(No symbol) [0x00007FF76D4503B1]\nE       \t(No symbol) [0x00007FF76D44E39D]\nE       \t(No symbol) [0x00007FF76D44EBAF]\nE       \t(No symbol) [0x00007FF76D45E220]\nE       \t(No symbol) [0x00007FF76D475C6F]\nE       \t(No symbol) [0x00007FF76D47B67A]\nE       \t(No symbol) [0x00007FF76D44F33A]\nE       \t(No symbol) [0x00007FF76D47584F]\nE       \t(No symbol) [0x00007FF76D4FBFDE]\nE       \t(No symbol) [0x00007FF76D4DBFC3]\nE       \t(No symbol) [0x00007FF76D4A9617]\nE       \t(No symbol) [0x00007FF76D4AA211]\nE       \tGetHandleVerifier [0x00007FF76D9494AD+3301629]\nE       \tGetHandleVerifier [0x00007FF76D9936D3+3605283]\nE       \tGetHandleVerifier [0x00007FF76D989450+3563680]\nE       \tGetHandleVerifier [0x00007FF76D6E4326+790390]\nE       \t(No symbol) [0x00007FF76D5B750F]\nE       \t(No symbol) [0x00007FF76D5B3404]\nE       \t(No symbol) [0x00007FF76D5B3592]\nE       \t(No symbol) [0x00007FF76D5A2F9F]\nE       \tBaseThreadInitThunk [0x00007FFEB6867344+20]\nE       \tRtlUserThreadStart [0x00007FFEB75BCC91+33]\n\n..\\..\\..\\PycharmProjects\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1718649308688, "stop": 1718649316357, "uuid": "9b0f7479-ed90-4174-9de9-6f74324cb90a", "historyId": "75bec9bbbfb480c60ca051c751b7d503", "testCaseId": "75bec9bbbfb480c60ca051c751b7d503", "fullName": "tests.test_login_logout#test_login_logout", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_logout"}, {"name": "host", "value": "DESKTOP-PESPH7P"}, {"name": "thread", "value": "15176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_logout"}]}